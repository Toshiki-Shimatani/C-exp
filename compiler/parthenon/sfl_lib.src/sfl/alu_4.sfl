/******************************************
* (C)Copyright by N.T.T 1993(unpublished) *
* All rights are reserved.                *
******************************************/
module alu_4 {
    input       enb_cry ;   /*   1   1   0   0   0  */
    input       inv_in2 ;   /*   0   1   0   0   0  */
    input       and ;       /*   0   0   1   0   0  */
    input       or ;        /*   0   0   0   1   0  */
    input       eor ;       /*   1   1   0   0   1  */
    input       cin ;       /*   0   1   0   0   0  */
    input       in1<4> ;
    input       in2<4> ;
    output      out<4> ;
    output      gout ;
    output      pout ;
    output      ovf ;
    output      eq ;
    sel_v       tmp_in2<4> ;
    sel_v       g<4> ;
    sel_v       p<4> ;
    sel_v       data<4> ;
    sel_v       cry<4> ;
    sel_v       cout ;
    instrin     do ;
    instruct do par {
        any {
            inv_in2 : tmp_in2 = ^in2<3> 
                             || ^in2<2>
                             || ^in2<1>
                             || ^in2<0> ;
            else :    tmp_in2 = in2 ;
        }
        g = (in1<3> & tmp_in2<3>)
         || (in1<2> & tmp_in2<2>)
         || (in1<1> & tmp_in2<1>)
         || (in1<0> & tmp_in2<0>) ;
        p = (in1<3> | tmp_in2<3>)
         || (in1<2> | tmp_in2<2>)
         || (in1<1> | tmp_in2<1>)
         || (in1<0> | tmp_in2<0>) ;
        data = ((p<3> & or) | (g<3> & and) | (p<3> & ^g<3> & eor))
            || ((p<2> & or) | (g<2> & and) | (p<2> & ^g<2> & eor))
            || ((p<1> & or) | (g<1> & and) | (p<1> & ^g<1> & eor))
            || ((p<0> & or) | (g<0> & and) | (p<0> & ^g<0> & eor)) ;
        cry = (((cin&p<0>&p<1>&p<2>)
               |    (g<0>&p<1>&p<2>)
               |         (g<1>&p<2>)
               |               g<2>) & enb_cry)
           || (((cin&p<0>&p<1>)
               |    (g<0>&p<1>)
               |          g<1>) & enb_cry)
           || (((cin&p<0>)
               |     g<0>) & enb_cry)
           || (cin & enb_cry) ;
        cout = (cin&p<0>&p<1>&p<2>&p<3>)
              |    (g<0>&p<1>&p<2>&p<3>)
              |         (g<1>&p<2>&p<3>)
              |              (g<2>&p<3>)
              |                    g<3> ;
        out = data @ cry ;
        gout = (g<0>&p<1>&p<2>&p<3>)
              |     (g<1>&p<2>&p<3>)
              |          (g<2>&p<3>)
              |                g<3> ;
        pout = p<0>&p<1>&p<2>&p<3> ;
        ovf = cout @ cry<3> ;
        eq = ^(out<3> | out<2> | out<1> | out<0>) ;
    }
}
